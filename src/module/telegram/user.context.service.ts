import { Injectable, Logger } from '@nestjs/common'
import { AccountService } from '@/module/account/account.service'
import { BotContext } from '@/module/telegram/types/telegram.context'
import { Account } from '@/module/account/entities/account.entity'
import { Profile } from '@/module/profile/entities/profile.entity'
import { ProfileService } from '@/module/profile/services/profile.service'

@Injectable()
export class UserContextService {
	private readonly logger: Logger = new Logger(UserContextService.name)

	constructor(
		private readonly accountService: AccountService,
		private readonly profileService: ProfileService
	) {}

	async getTelegramId(ctx: BotContext): Promise<number> {
		const telegramId: number = ctx.from?.id
		this.logger.verbose(`üì• –í—ã–∑–≤–∞–Ω getTelegramId()`)
		this.logger.debug(`‚úÖ Telegram ID: ${telegramId}`)
		return telegramId
	}

	async getAccount(ctx: BotContext): Promise<Account | null> {
		this.logger.verbose(`üì• –í—ã–∑–≤–∞–Ω getAccount()`)

		if (ctx.session.account) {
			this.logger.log(
				`‚úÖ –ê–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏. Telegram ID: ${ctx.from.id}, Account ID: ${ctx.session.account.id}`
			)
			return ctx.session.account
		}

		this.logger.warn(
			`üîç –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏. Telegram ID: ${ctx.from.id}`
		)

		const account: Account = await this.accountService.findByTelegramId(
			ctx.from.id
		)

		if (!account) {
			this.logger.error(
				`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑–µ. Telegram ID: ${ctx.from.id}`
			)
			return null
		}

		this.logger.log(
			`‚úÖ –ê–∫–∫–∞—É–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –±–∞–∑—ã. Account ID: ${account.id}, Username: ${account.username}, Telegram ID: ${account.telegramId}`
		)

		ctx.session.account = account
		this.logger.log(`üíæ –ê–∫–∫–∞—É–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Å–µ—Å—Å–∏—é.`)

		return account
	}

	async getProfile(ctx: BotContext): Promise<Profile> {
		this.logger.verbose(`üì• –í—ã–∑–≤–∞–Ω getProfile()`)

		if (ctx.session.profile) {
			this.logger.log(
				`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏. Telegram ID: ${ctx.from.id}, Profile ID: ${ctx.session.profile.id}`
			)
			return ctx.session.profile
		}

		this.logger.warn(
			`üîç –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏. –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ getAccount(). Telegram ID: ${ctx.from.id}`
		)

		const account: Account = await this.getAccount(ctx)

		if (!account) {
			this.logger.error(
				`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. Telegram ID: ${ctx.from.id}`
			)
			throw new Error('‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞')
		}

		if (!account.profile) {
			this.logger.error(
				`‚ùå –£ –∞–∫–∫–∞—É–Ω—Ç–∞ ID ${account.id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å`
			)
			throw new Error('‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è')
		}

		ctx.session.profile = account.profile
		this.logger.log(
			`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Å–µ—Å—Å–∏–∏. Profile ID: ${account.profile.id}`
		)

		return account.profile
	}

	clearSession(ctx: BotContext): void {
		this.logger.verbose(`üì• –í—ã–∑–≤–∞–Ω clearSession()`)
		this.logger.log(`üßπ –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è Telegram ID: ${ctx.from.id}`)
		delete ctx.session.profile
		delete ctx.session.account
		this.logger.log(`‚úÖ –°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞.`)
	}
}

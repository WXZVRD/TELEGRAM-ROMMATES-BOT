import { Ctx, Scene, Wizard, WizardStep } from 'nestjs-telegraf'
import { ScenesData } from '@/module/telegram/scenes/scenes.data'
import { Injectable } from '@nestjs/common'
import { Markup, Scenes } from 'telegraf'
import { WizardContext } from 'telegraf/scenes'
import { ProfileService } from '@/module/profile/profile.service'
import { AccountService } from '@/module/account/account.service'
import {
	Buttons,
	RenderProfileOptions,
	TelegramProfileRenderer
} from '@/module/telegram/ui'
import { GenderType, PurposeEnum } from '@/module/profile/types/profile.types'
import { isValidName } from '@/module/telegram/utils/isValidName'
import { isValidGender } from '@/module/telegram/utils/isValidGender'
import { isValidString } from '@/module/telegram/utils/isValidString'
import { isValidAge } from '@/module/telegram/utils/isValidAge'
import { normalizeInput } from '@/module/telegram/utils/normalizeInput'

type ProfileState = {
	name?: string
	age?: number
	gender?: GenderType
	preferGender?: GenderType
	livingCity?: string
	relocateCity?: string
	purpose?: PurposeEnum
	photos?: string[]
	description?: string
}

type CreateProfileContext = Scenes.WizardContext & {
	wizard: WizardContext['wizard']
	scene: {
		state: ProfileState
	}
}

@Injectable()
@Wizard(ScenesData.CREATE_PROFILE)
@Scene(ScenesData.CREATE_PROFILE)
export class CreateProfileScene {
	constructor(
		private readonly profileService: ProfileService,
		private readonly accountService: AccountService
	) {}

	private logStep(ctx: CreateProfileContext, step: string, extra?: any) {
		console.log(
			`üìç Step ${step} | From: @${ctx.from?.username ?? 'unknown'} | ID: ${ctx.from?.id}`
		)
		if (extra) console.log('‚û°Ô∏è Data:', extra)
	}

	@WizardStep(0)
	async step0(@Ctx() ctx: CreateProfileContext) {
		console.log(
			`[Wizard][step0] Started by: @${ctx.from?.username ?? 'unknown'}`
		)

		await ctx.reply('‚úíÔ∏è –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')

		ctx.wizard.next()
	}

	@WizardStep(1)
	async step1(@Ctx() ctx: CreateProfileContext) {
		const nameInput = ctx.message['text']

		const isNameValid = isValidName(nameInput)

		this.logStep(ctx, '1 - name', nameInput)

		if (!isNameValid) {
			await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–º—è.')
			return
		}

		ctx.scene.state.name = nameInput
		console.log('‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', nameInput)

		await ctx.reply('üìÖ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')
		ctx.wizard.next()
	}

	@WizardStep(2)
	async step2(@Ctx() ctx: CreateProfileContext) {
		const ageInput = ctx.message['text']
		const age = parseInt(ageInput)

		this.logStep(ctx, '2 - age input', age)

		if (isValidAge(age)) {
			await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.')
			return
		}

		ctx.scene.state.age = age
		console.log('‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', age)

		await ctx.reply(
			'üöª –ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–æ–ª?',
			Markup.keyboard([
				[
					Buttons.primary(GenderType.MALE, 'male'),
					Buttons.primary(GenderType.FEMALE, 'female')
				]
			]).resize()
		)

		ctx.wizard.next()
	}

	@WizardStep(3)
	async step3(@Ctx() ctx: CreateProfileContext) {
		const genderInput = ctx.message['text'].trim().toLowerCase()
		const normalizedGender = normalizeInput(genderInput)

		const isGenderValid = isValidGender(normalizedGender)
		if (!isGenderValid) {
			await ctx.reply(
				'‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª (–ø–∞—Ä–µ–Ω—å –∏–ª–∏ –¥–µ–≤—É—à–∫–∞).',
				Markup.keyboard([
					[
						Buttons.primary(GenderType.MALE, 'male'),
						Buttons.primary(GenderType.FEMALE, 'female')
					]
				]).resize()
			)
			return
		}

		ctx.scene.state.gender = genderInput
		await ctx.reply(
			'üîç –ö–æ–≥–æ —Ç—ã –∏—â–µ—à—å? (–ø–∞—Ä–µ–Ω—å / –¥–µ–≤—É—à–∫–∞ / –Ω–µ –≤–∞–∂–Ω–æ)',
			Markup.keyboard([
				[
					Buttons.primary(GenderType.MALE, '–ø–∞—Ä–µ–Ω—å'),
					Buttons.primary(GenderType.FEMALE, '–¥–µ–≤—É—à–∫–∞'),
					Buttons.primary(GenderType.ANY, '–ª—é–±–æ–π')
				]
			]).resize()
		)

		ctx.wizard.next()
	}

	@WizardStep(4)
	async step4(@Ctx() ctx: CreateProfileContext) {
		const genderInput = ctx.message['text']?.toLowerCase()
		const normalizedGender = normalizeInput(genderInput)

		const isValidPreferGender = isValidGender(normalizedGender)

		if (!isValidPreferGender) {
			await ctx.reply(
				'‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ (–ø–∞—Ä–µ–Ω—å, –¥–µ–≤—É—à–∫–∞, –Ω–µ –≤–∞–∂–Ω–æ).',
				Markup.keyboard([
					[
						Buttons.primary(GenderType.MALE, '–ø–∞—Ä–µ–Ω—å'),
						Buttons.primary(GenderType.FEMALE, '–¥–µ–≤—É—à–∫–∞'),
						Buttons.primary(GenderType.ANY, '–ª—é–±–æ–π')
					]
				]).resize()
			)
			return
		}

		ctx.scene.state.preferGender = genderInput
		await ctx.reply(
			'üìç –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∏—â–µ—Ç–µ —Å–æ—Å–µ–¥–∞?',
			Markup.removeKeyboard()
		)

		ctx.wizard.next()
	}

	@WizardStep(5)
	async step5(@Ctx() ctx: CreateProfileContext) {
		const cityInput = ctx.message['text']
		const normalizedCityInput = normalizeInput(cityInput)

		if (!isValidString(normalizedCityInput)) {
			await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥.')
			return
		}

		ctx.scene.state.relocateCity = normalizedCityInput

		await ctx.reply(
			'üéØ –¶–µ–ª—å –ø–æ–∏—Å–∫–∞ (–±–∏–∑–Ω–µ—Å, –ø—Ä–æ—Å—Ç–æ —Å–æ–∂–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ç.–¥.)?',
			Markup.keyboard([
				[
					Buttons.primary(PurposeEnum.ROOMMATE, '—Å–æ–∂–∏—Ç–µ–ª—å'),
					Buttons.primary(
						PurposeEnum.BUSINESS_PARTNER,
						'–ø–∞—Ä—Ç–Ω—ë—Ä –ø–æ –∞—Ä–µ–Ω–¥–µ'
					)
				]
			]).resize()
		)

		ctx.wizard.next()
	}

	@WizardStep(6)
	async step6(@Ctx() ctx: CreateProfileContext) {
		const purposeInput = ctx.message['text']
		const normalizedPurpose = normalizeInput(purposeInput)

		this.logStep(ctx, '6 - purpose raw', normalizedPurpose)

		if (!isValidString(normalizedPurpose)) {
			console.log('‚ùå –ù–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏')
			await ctx.reply(
				'‚ùå –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã–º–∏ –Ω–∞–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.',
				Markup.keyboard([
					[
						Buttons.primary(PurposeEnum.ROOMMATE, '—Å–æ–∂–∏—Ç–µ–ª—å'),
						Buttons.primary(
							PurposeEnum.BUSINESS_PARTNER,
							'–ø–∞—Ä—Ç–Ω—ë—Ä –ø–æ –∞—Ä–µ–Ω–¥–µ'
						)
					]
				]).resize()
			)
			return
		}

		console.log('üßº –û—á–∏—â–µ–Ω–Ω–∞—è —Ü–µ–ª—å:', normalizedPurpose)
		if (!['—Å–æ–∂–∏—Ç–µ–ª—å', '–ø–∞—Ä—Ç–Ω—ë—Ä –ø–æ –∞—Ä–µ–Ω–¥–µ'].includes(normalizedPurpose)) {
			console.log('‚ùå –¶–µ–ª—å –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö')
			return ctx.reply(
				'‚ùå –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã–º–∏ –Ω–∞–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.',
				Markup.keyboard([
					[
						Buttons.primary(PurposeEnum.ROOMMATE, '—Å–æ–∂–∏—Ç–µ–ª—å'),
						Buttons.primary(
							PurposeEnum.BUSINESS_PARTNER,
							'–ø–∞—Ä—Ç–Ω—ë—Ä –ø–æ –∞—Ä–µ–Ω–¥–µ'
						)
					]
				]).resize()
			)
		}

		ctx.scene.state.purpose =
			normalizedPurpose === '—Å–æ–∂–∏—Ç–µ–ª—å'
				? PurposeEnum.ROOMMATE
				: PurposeEnum.BUSINESS_PARTNER
		console.log('‚úÖ –¶–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', normalizedPurpose)
		await ctx.reply(
			'üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 3-—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ –æ–¥–Ω–æ–π. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ì–æ—Ç–æ–≤–æ".',
			Markup.keyboard([['‚úÖ –ì–æ—Ç–æ–≤–æ']]).resize()
		)
		ctx.wizard.next()
	}

	@WizardStep(7)
	async step7(@Ctx() ctx: CreateProfileContext) {
		const msg = ctx.message
		const state = ctx.scene.state

		state.photos ||= []

		if ('text' in msg && msg.text === '‚úÖ –ì–æ—Ç–æ–≤–æ') {
			if (state.photos.length === 0) {
				await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.')
				return
			}
			await ctx.reply('‚úèÔ∏è –û–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ —Å–æ—Å–µ–¥—É:')
			ctx.wizard.next()
			return
		}

		const photo = msg['photo']
		if (!Array.isArray(photo)) {
			await ctx.reply(
				'‚ùå –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ (–Ω–µ –∫–∞–∫ —Ñ–∞–π–ª) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ì–æ—Ç–æ–≤–æ".'
			)
			return
		}

		const fileId = photo.at(-1).file_id
		state.photos.push(fileId)

		if (state.photos.length >= 3) {
			await ctx.reply(
				'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ 3 —Ñ–æ—Ç–æ. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª–µ–µ...',
				Markup.removeKeyboard()
			)
			await ctx.reply('‚úèÔ∏è –û–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è:')
			return ctx.wizard.next()
		}

		await ctx.reply(
			`‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å ${3 - state.photos.length}.`,
			Markup.keyboard([['‚úÖ –ì–æ—Ç–æ–≤–æ']]).resize()
		)
	}

	@WizardStep(8)
	async step8(@Ctx() ctx: CreateProfileContext) {
		const description = ctx.message['text']

		if (typeof description !== 'string') {
			await ctx.reply('‚ùå –û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.')
			return
		}

		ctx.scene.state.description = description

		await ctx.reply('üéØ –ì–¥–µ –≤—ã —Å–µ–π—á–∞—Å –ø—Ä–æ—Ä–∂–∏–≤–∞–µ—Ç–µ?')
		ctx.wizard.next()
	}

	@WizardStep(9)
	async step9(@Ctx() ctx: CreateProfileContext) {
		const city = ctx.message['text']
		this.logStep(ctx, '9 - living city', city)
		if (!isValidString(city)) return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥.')

		ctx.scene.state.livingCity = city

		const profile = ctx.scene.state

		await ctx.reply('üéâ –£—Ä–∞! –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.')

		const telegramId = ctx.from.id
		const account = await this.accountService.findByTelegramId(telegramId)

		const renderData: RenderProfileOptions = {
			...(profile as Required<Omit<RenderProfileOptions, 'account'>>),
			account
		}

		const renderedProfile =
			TelegramProfileRenderer.getMediaGroup(renderData)
		await ctx.replyWithMediaGroup(renderedProfile)

		await this.profileService.create({
			livingCity: profile.livingCity,
			description: profile.description,
			age: profile.age,
			gender: profile.gender,
			relocateCity: profile.relocateCity,
			name: profile.name,
			photos: profile.photos,
			purpose: profile.purpose,
			isActive: true,
			preferGender: profile.preferGender,
			account: account
		})

		await ctx.scene.leave()
	}
}

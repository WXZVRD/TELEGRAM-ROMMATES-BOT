import { Action, Ctx, Hears, On, Update } from 'nestjs-telegraf'
import { Injectable, Logger } from '@nestjs/common'
import { Scenes } from 'telegraf'
import { ScenesData } from '@/module/telegram/scenes/scenes.data'
import {
	ActionTitles,
	CallbackActions
} from '@/module/telegram/types/callbackActions.enum'
import { Account } from '@/module/account/entities/account.entity'
import { TelegramProfileRenderer } from '@/module/telegram/ui'
import { MenuManagerService } from '@/module/telegram/modules/menu/menuManager.service'
import { BotContext } from '@/module/telegram/types/telegram.context'
import { ProfileService } from '@/module/profile/services/profile.service'
import { RedisSessionStore } from '@/module/redis/redis.session'
import { Profile } from '@/module/profile/entities/profile.entity'
import { UserContextService } from '@/module/telegram/user.context.service'
import { CallbackQuery } from 'typegram'
import {
	REDIS_KEY_MATCHES_PROFILES,
	REDIS_KEY_PROFILE_ID_SESSION_KEY
} from '@/module/redis/constants'

@Update()
@Injectable()
export class TelegramActions {
	private readonly logger: Logger = new Logger(TelegramActions.name)

	constructor(
		private readonly store: RedisSessionStore<Profile[]>,
		private readonly profileService: ProfileService,
		private readonly menuManagerService: MenuManagerService,
		private readonly userContextService: UserContextService
	) {}

	@Action(CallbackActions.CREATE_PROFILE)
	async onCreateProfile(@Ctx() ctx: Scenes.SceneContext): Promise<void> {
		const telegramId: number = ctx.from?.id
		const username: string = ctx.from?.username || 'unknown'

		this.logger.log(
			`Callback CREATE_PROFILE from @${username} (${telegramId})`
		)

		await ctx.answerCbQuery()
		await ctx.reply('üìã –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã...')
		await ctx.scene.enter(ScenesData.CREATE_PROFILE)

		this.logger.log(
			`User @${username} was moved to scene: ${ScenesData.CREATE_PROFILE}`
		)
	}

	@Hears(ActionTitles.FIND_ROOMMATE)
	async findRoommate(@Ctx() ctx: BotContext): Promise<void> {
		const logger: Logger = new Logger('FIND_ROOMMATE')
		logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø–æ–∏—Å–∫ —Å–æ–∂–∏—Ç–µ–ª—è`)
		await this.menuManagerService.send(ctx, 'FIND_ROOMMATE')
		logger.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é FIND_ROOMMATE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.from.id}`)

		const account: Account = await this.userContextService.getAccount(ctx)
		logger.log(
			`–ü–æ–ª—É—á–µ–Ω –∞–∫–∫–∞—É–Ω—Ç ID: ${account?.id}, –ø—Ä–æ—Ñ–∏–ª—å ID: ${account.profile?.id}`
		)

		logger.log(
			`–§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è cacheKey: ${REDIS_KEY_MATCHES_PROFILES('MATCHES_PROFILES', ctx.from.id)}`
		)

		let matchesProfiles: Profile[] = await this.store.get(
			REDIS_KEY_MATCHES_PROFILES('MATCHES_PROFILES', ctx.from.id)
		)
		if (!matchesProfiles) {
			logger.log(`–ù–µ—Ç –∫–µ—à–∞ –¥–ª—è ${ctx.from.id}, –∑–∞–≥—Ä—É–∂–∞—é –∏–∑ –±–∞–∑—ã...`)
			matchesProfiles = await this.profileService.findMatchesFor(
				account.profile.id
			)
			logger.log(`–ù–∞–π–¥–µ–Ω–æ ${matchesProfiles.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç`)
			await this.store.set(
				REDIS_KEY_MATCHES_PROFILES('MATCHES_PROFILES', ctx.from.id),
				matchesProfiles,
				300
			)
			logger.log(
				`–ê–Ω–∫–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à: ${REDIS_KEY_MATCHES_PROFILES('MATCHES_PROFILES', ctx.from.id)}`
			)
			ctx.session.currentProfileIndex = 0
		} else {
			logger.log(`–ö–µ—à –Ω–∞–π–¥–µ–Ω (${matchesProfiles.length} –∞–Ω–∫–µ—Ç)`)
		}

		const currentIndex: number = ctx.session.currentProfileIndex || 0
		logger.log(`–¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –ø—Ä–æ—Ñ–∏–ª—è –≤ —Å–µ—Å—Å–∏–∏: ${currentIndex}`)

		if (currentIndex >= matchesProfiles.length) {
			logger.log(`–í—Å–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${ctx.from.id}`)
			await ctx.reply('üéâ –í—Å–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã.')
			return
		}

		const matchedOneProfile: Profile = matchesProfiles[currentIndex]
		logger.log(
			`–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–Ω–∫–µ—Ç–∞ ID ${matchedOneProfile.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.from.id}`
		)
		ctx.session.currentProfileIndex = currentIndex

		await TelegramProfileRenderer.sendProfile(ctx, {
			...matchedOneProfile,
			account: matchedOneProfile.account
		})
	}

	@Hears(ActionTitles.SKIP_PROFILE)
	async skipProfile(@Ctx() ctx: BotContext): Promise<void> {
		const logger: Logger = new Logger('SKIP_PROFILE')
		logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"`)

		const cacheKey: string = `${REDIS_KEY_MATCHES_PROFILES('MATCHES_PROFILES', ctx.from.id)}:${ctx.from.id}`
		let matchesProfiles: Profile[] = await this.store.get(
			REDIS_KEY_MATCHES_PROFILES('MATCHES_PROFILES', ctx.from.id)
		)

		if (!matchesProfiles || matchesProfiles.length === 0) {
			logger.warn(`–ù–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`)
			await ctx.reply('üôÖ‚Äç‚ôÇÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç.')
			return
		}

		const skippedProfile: Profile = matchesProfiles.shift()
		logger.log(`–ü—Ä–æ–ø—É—â–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞ ID: ${skippedProfile?.id}`)

		const account: Account = await this.userContextService.getAccount(ctx)
		logger.log(`–ü–æ–ª—É—á–µ–Ω –∞–∫–∫–∞—É–Ω—Ç ID: ${account.id}`)

		await this.profileService.skipProfile(account, skippedProfile?.id)
		logger.log(
			`–î–µ–π—Å—Ç–≤–∏–µ skip —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è ID: ${skippedProfile?.id}`
		)

		await this.store.set(
			REDIS_KEY_MATCHES_PROFILES('MATCHES_PROFILES', ctx.from.id),
			matchesProfiles,
			300
		)
		logger.log(
			`–ö–µ—à –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞ (–æ—Å—Ç–∞–ª–æ—Å—å ${matchesProfiles.length} –∞–Ω–∫–µ—Ç)`
		)

		if (matchesProfiles.length === 0) {
			logger.log(
				`–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`
			)
			await ctx.reply('üéâ –í—Å–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã.')
			return
		}

		ctx.session.currentProfileIndex = 0
		const nextProfile = matchesProfiles[0]
		logger.log(`–ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã ID: ${nextProfile.id}`)

		await TelegramProfileRenderer.sendProfile(ctx, {
			...account.profile,
			account
		})
	}

	@Hears(ActionTitles.LIKE_PROFILE)
	async likeProfile(@Ctx() ctx: BotContext): Promise<void> {
		const logger: Logger = new Logger('LIKE_PROFILE')
		logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–õ–∞–π–∫"`)

		const cacheKey: string = `${REDIS_KEY_MATCHES_PROFILES('MATCHES_PROFILES', ctx.from.id)}:${ctx.from.id}`
		let matchesProfiles: Profile[] = await this.store.get(
			REDIS_KEY_MATCHES_PROFILES('MATCHES_PROFILES', ctx.from.id)
		)

		if (!matchesProfiles || matchesProfiles.length === 0) {
			logger.warn(`–ù–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`)
			await ctx.reply('üôÖ‚Äç‚ôÇÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç.')
			return
		}

		const currentIndex: number = ctx.session.currentProfileIndex || 0
		logger.log(`–¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –ª–∞–π–∫–∞–µ–º–æ–π –∞–Ω–∫–µ—Ç—ã: ${currentIndex}`)

		if (currentIndex >= matchesProfiles.length) {
			logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –∞–Ω–∫–µ—Ç—ã`)
			await ctx.reply('üéâ –í—Å–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã.')
			return
		}

		const likedProfile: Profile = matchesProfiles[currentIndex]
		logger.log(
			`–ê–Ω–∫–µ—Ç–∞ ID ${likedProfile.id} –ª–∞–π–∫–Ω—É—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${ctx.from.id}`
		)

		const account: Account = await this.userContextService.getAccount(ctx)
		logger.log(
			`–ü–æ–ª—É—á–µ–Ω –∞–∫–∫–∞—É–Ω—Ç: ${account.id}, –ø—Ä–æ—Ñ–∏–ª—å ID: ${account.profile?.id}`
		)

		await this.profileService.likeProfile(account, likedProfile.id)
		logger.log(`–î–µ–π—Å—Ç–≤–∏–µ like —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ`)

		await ctx.telegram.sendMessage(
			likedProfile.account.telegramId,
			`‚ù§Ô∏è –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∫–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å!\n\nüëÄ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –≤–∑–∞–∏–º–Ω—ã—Ö —Å–∏–º–ø–∞—Ç–∏–π!`,
			{
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
								callback_data: `LIKED_BY_${account.profile.id}`
							}
						]
					]
				}
			}
		)
		logger.log(
			`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${likedProfile.account.telegramId}`
		)

		matchesProfiles.splice(currentIndex, 1)
		ctx.session.currentProfileIndex = 0
		await this.store.set(
			REDIS_KEY_MATCHES_PROFILES('MATCHES_PROFILES', ctx.from.id),
			matchesProfiles,
			300
		)
		logger.log(
			`–ö–µ—à –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ—Å–ª–µ –ª–∞–π–∫–∞ (–æ—Å—Ç–∞–ª–æ—Å—å ${matchesProfiles.length} –∞–Ω–∫–µ—Ç)`
		)

		if (matchesProfiles.length === 0) {
			logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –∞–Ω–∫–µ—Ç—ã`)
			await ctx.reply('üéâ –í—Å–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã.')
			return
		}

		const nextProfile: Profile = matchesProfiles[0]
		logger.log(`–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞ ID: ${nextProfile.id}`)

		await TelegramProfileRenderer.sendProfile(ctx, {
			...account.profile,
			account
		})
	}

	@On('callback_query')
	async onLikedBy(@Ctx() ctx: BotContext) {
		const logger: Logger = new Logger('LIKED_BY_CALLBACK')
		logger.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`)

		const cbq: CallbackQuery = ctx.callbackQuery
		if (!cbq || !('data' in cbq)) {
			logger.warn(`callbackQuery –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç data`)
			return
		}

		const data: string = cbq.data
		logger.log(`–ü–æ–ª—É—á–µ–Ω callback data: ${data}`)

		if (!data?.startsWith('LIKED_BY_')) {
			logger.log(`Callback –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ LIKED_BY_`)
			return
		}

		const likerId: number = Number(data.replace('LIKED_BY_', ''))
		logger.log(`–ò–∑–≤–ª–µ—á—ë–Ω ID –ª–∞–π–∫–Ω—É–≤—à–µ–≥–æ: ${likerId}`)

		const profile: Profile = await this.profileService.getById(likerId)

		if (!profile?.isActive || !profile) {
			logger.warn(`–ü—Ä–æ—Ñ–∏–ª—å ${likerId} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω`)
			await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∞–Ω–∫–µ—Ç—É.')
			return
		}

		await ctx.answerCbQuery()
		logger.log(
			`–ü—Ä–æ—Ñ–∏–ª—å ${likerId} –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.from.id}`
		)

		await TelegramProfileRenderer.sendProfile(ctx, {
			...profile,
			account: profile.account
		})
	}

	@Hears(ActionTitles.EDIT_PROFILE)
	async editProfile(@Ctx() ctx: BotContext): Promise<void> {
		await this.menuManagerService.send(ctx, 'EDIT_PROFILE')
	}

	@Hears(ActionTitles.REACREATE_PROFILE)
	async recreateProfile(@Ctx() ctx: BotContext): Promise<void> {
		await ctx.reply('üìã –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã...')
		await ctx.scene.enter(ScenesData.EDIT_PROFILE)

		this.logger.log(
			`User @${ctx.from.username} was moved to scene: ${ScenesData.EDIT_PROFILE}`
		)
	}

	@Hears(ActionTitles.BACK_TO_MENU)
	async backToMenu(@Ctx() ctx: BotContext): Promise<void> {
		await this.menuManagerService.send(ctx, 'MAIN_MENU')
	}

	@Hears(ActionTitles.SHOW_PROFILE)
	async showProfile(@Ctx() ctx: BotContext): Promise<void> {
		let profile: Profile = await this.userContextService.getProfile(ctx)

		if (!profile) {
			await ctx.reply('‚ùå –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã.')
			return
		}

		await TelegramProfileRenderer.sendProfile(ctx, {
			...profile,
			account: profile.account
		})

		await this.menuManagerService.send(ctx, 'PROFILE_MENU')
	}

	@Hears(ActionTitles.DEACTIVATE_PROFILE)
	async deactivateProfile(@Ctx() ctx: BotContext): Promise<void> {
		const logger: Logger = new Logger('DeactivateProfile')
		const telegramId: number = ctx.from?.id

		logger.log(
			`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç Telegram ID: ${telegramId}`
		)

		let profileId: number = ctx.session[REDIS_KEY_PROFILE_ID_SESSION_KEY()]

		if (profileId) {
			logger.log(`–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏: ${profileId}`)
		} else {
			logger.warn(
				'–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏, –ø—Ä–æ–±—É—é –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±–∞–∑—ã...'
			)

			const account: Account =
				await this.userContextService.getAccount(ctx)
			profileId = account.profile?.id

			if (profileId) {
				ctx.session[REDIS_KEY_PROFILE_ID_SESSION_KEY()] = profileId
				logger.log(
					`–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é: ${profileId}`
				)
			} else {
				logger.error('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
				await ctx.reply('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
				return
			}
		}

		await this.profileService.toggleProfileActive(profileId)
		logger.log(`–ü—Ä–æ—Ñ–∏–ª—å ${profileId} —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.`)

		await ctx.reply('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.')
	}
}

import { Ctx, Scene, Wizard, WizardStep } from 'nestjs-telegraf'
import { ScenesData } from '@/module/telegram/scenes/scenes.data'
import { Injectable } from '@nestjs/common'
import { Markup, Scenes } from 'telegraf'
import { WizardContext } from 'telegraf/scenes'
import { ProfileService } from '@/module/profile/profile.service'
import { AccountService } from '@/module/account/account.service'
import {
	RenderProfileOptions,
	TelegramProfileRenderer
} from '@/module/telegram/ui'

type ProfileState = {
	name?: string
	age?: number
	gender?: string
	preferGender?: string
	livingCity?: string
	relocateCity?: string
	purpose?: string
	photos?: string[]
	description?: string
}

type CreateProfileContext = Scenes.WizardContext & {
	wizard: WizardContext['wizard']
	scene: {
		state: ProfileState
	}
}

@Injectable()
@Wizard(ScenesData.CREATE_PROFILE)
@Scene(ScenesData.CREATE_PROFILE)
export class CreateProfileScene {
	constructor(
		private readonly profileService: ProfileService,
		private readonly accountService: AccountService
	) {}
	private async prompt(ctx: CreateProfileContext, text: string) {
		await ctx.reply(text)
		ctx.wizard.next()
	}

	@WizardStep(0)
	async step0(@Ctx() ctx: CreateProfileContext) {
		console.log(
			`[Wizard][step0] Started by: @${ctx.from?.username ?? 'unknown'}`
		)
		await this.prompt(ctx, '‚úíÔ∏è –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
	}

	@WizardStep(1)
	async step1(@Ctx() ctx: CreateProfileContext) {
		const name = ctx.message['text']
		if (!name?.trim()) return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º.')

		ctx.scene.state.name = name
		await this.prompt(ctx, 'üìÖ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')
	}

	@WizardStep(2)
	async step2(@Ctx() ctx: CreateProfileContext) {
		const age = parseInt(ctx.message['text'])
		if (isNaN(age) || age < 10 || age > 100)
			return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (10‚Äì100).')

		ctx.scene.state.age = age
		await this.prompt(ctx, 'üöª –ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–æ–ª?')
	}

	@WizardStep(3)
	async step3(@Ctx() ctx: CreateProfileContext) {
		const gender = ctx.message['text']
		if (!gender?.trim()) return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª.')

		ctx.scene.state.gender = gender
		await this.prompt(ctx, 'üîç –ö–æ–≥–æ —Ç—ã –∏—â–µ—à—å? (–ø–∞—Ä–µ–Ω—å/–¥–µ–≤—É—à–∫–∞/–Ω–µ –≤–∞–∂–Ω–æ)')
	}

	@WizardStep(4)
	async step4(@Ctx() ctx: CreateProfileContext) {
		const preferGender = ctx.message['text']
		if (!preferGender?.trim()) return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ.')

		ctx.scene.state.preferGender = preferGender
		await this.prompt(ctx, 'üìç –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∏—â–µ—Ç–µ —Å–æ—Å–µ–¥–∞?')
	}

	@WizardStep(5)
	async step5(@Ctx() ctx: CreateProfileContext) {
		const city = ctx.message['text']
		if (!city?.trim()) return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥.')

		ctx.scene.state.relocateCity = city
		await this.prompt(
			ctx,
			'üéØ –¶–µ–ª—å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è (–±–∏–∑–Ω–µ—Å, –ø—Ä–æ—Å—Ç–æ —Å–æ–∂–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ç.–¥.)?'
		)
	}

	@WizardStep(6)
	async step6(@Ctx() ctx: CreateProfileContext) {
		const purpose = ctx.message['text']
		if (!purpose?.trim()) return ctx.reply('‚ùå –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å.')

		ctx.scene.state.purpose = purpose
		await ctx.reply(
			'üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 3-—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ –æ–¥–Ω–æ–π. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ì–æ—Ç–æ–≤–æ".',
			Markup.keyboard([['‚úÖ –ì–æ—Ç–æ–≤–æ']]).resize()
		)
		ctx.wizard.next()
	}

	@WizardStep(7)
	async step7(@Ctx() ctx: CreateProfileContext) {
		const msg = ctx.message
		const state = ctx.scene.state

		state.photos ||= []

		if ('text' in msg && msg.text === '‚úÖ –ì–æ—Ç–æ–≤–æ') {
			if (state.photos.length === 0) {
				await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.')
				return
			}
			await ctx.reply('‚úèÔ∏è –û–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ —Å–æ—Å–µ–¥—É:')
			return ctx.wizard.next()
		}

		const photo = msg['photo']
		if (!Array.isArray(photo)) {
			await ctx.reply(
				'‚ùå –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ (–Ω–µ –∫–∞–∫ —Ñ–∞–π–ª) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ì–æ—Ç–æ–≤–æ".'
			)
			return
		}

		const fileId = photo.at(-1).file_id
		state.photos.push(fileId)

		if (state.photos.length >= 3) {
			await ctx.reply('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ 3 —Ñ–æ—Ç–æ. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª–µ–µ...')
			await ctx.reply('‚úèÔ∏è –û–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è:')
			return ctx.wizard.next()
		}

		await ctx.reply(
			`‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å ${3 - state.photos.length}.`,
			Markup.keyboard([['‚úÖ –ì–æ—Ç–æ–≤–æ']]).resize()
		)
	}

	@WizardStep(8)
	async step8(@Ctx() ctx: CreateProfileContext) {
		const description = ctx.message['text']
		if (!description?.trim()) return ctx.reply('‚ùå –û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.')

		ctx.scene.state.description = description

		await this.prompt(ctx, 'üéØ –ì–¥–µ –≤—ã —Å–µ–π—á–∞—Å –ø—Ä–æ—Ä–∂–∏–≤–∞–µ—Ç–µ?')
	}

	@WizardStep(9)
	async step9(@Ctx() ctx: CreateProfileContext) {
		const city = ctx.message['text']
		if (!city?.trim()) return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥.')

		ctx.scene.state.livingCity = city

		const profile = ctx.scene.state

		await ctx.reply('üéâ –£—Ä–∞! –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.')

		const telegramId = ctx.from.id
		const account = await this.accountService.findByTelegramId(telegramId)

		const renderData: RenderProfileOptions = {
			...(profile as Required<Omit<RenderProfileOptions, 'account'>>),
			account
		}

		const renderedProfile =
			TelegramProfileRenderer.getMediaGroup(renderData)
		await ctx.replyWithMediaGroup(renderedProfile)

		await this.profileService.create({
			livingCity: profile.livingCity,
			description: profile.description,
			age: profile.age,
			gender: profile.gender,
			relocateCity: profile.relocateCity,
			name: profile.name,
			photos: profile.photos,
			purpose: profile.purpose,
			isActive: true,
			preferGender: profile.preferGender,
			account: account
		})

		await ctx.scene.leave()
	}
}

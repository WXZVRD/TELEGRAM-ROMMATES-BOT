import { Ctx, Scene, Wizard, WizardStep } from 'nestjs-telegraf'
import { ScenesData } from '@/module/telegram/scenes/scenes.data'
import { Injectable } from '@nestjs/common'
import { Markup } from 'telegraf'
import { ProfileService } from '@/module/profile/services/profile.service'
import {
	Buttons,
	RenderProfileOptions,
	TelegramProfileRenderer
} from '@/module/telegram/ui'
import { GenderType } from '@/module/profile/types/profile.types'
import { isValidName } from '@/module/telegram/utils/isValidName'
import { isValidGender } from '@/module/telegram/utils/isValidGender'
import { isValidString } from '@/module/telegram/utils/isValidString'
import { isValidAge } from '@/module/telegram/utils/isValidAge'
import { normalizeInput } from '@/module/telegram/utils/normalizeInput'
import {
	CreateProfileContext,
	ProfileState
} from '@/module/telegram/scenes/scene.type'
import { REDIS_KEY_PROFILE_SESSION_KEY } from '@/module/redis/constants'
import { Account } from '@/module/account/entities/account.entity'
import { MenuManagerService } from '@/module/telegram/modules/menu/menuManager.service'
import { Profile } from '@/module/profile/entities/profile.entity'
import { UserContextService } from '@/module/telegram/user.context.service'
import { InputMediaPhoto } from 'telegraf/types'

@Injectable()
@Wizard(ScenesData.EDIT_PROFILE)
@Scene(ScenesData.EDIT_PROFILE)
export class EditProfileScene {
	constructor(
		private readonly profileService: ProfileService,
		private readonly menuManagerService: MenuManagerService,
		private readonly userContextService: UserContextService
	) {}

	private logStep(
		ctx: CreateProfileContext,
		step: string,
		extra?: any
	): void {
		console.log(
			`üìç Step ${step} | From: @${ctx.from?.username ?? 'unknown'} | ID: ${ctx.from?.id}`
		)
		if (extra) console.log('‚û°Ô∏è Data:', extra)
	}

	@WizardStep(0)
	async step0(@Ctx() ctx: CreateProfileContext): Promise<void> {
		console.log(
			`[Wizard][step0] Started by: @${ctx.from?.username ?? 'unknown'} | id: ${ctx.from?.id}`
		)

		const cachedProfile = ctx.session[REDIS_KEY_PROFILE_SESSION_KEY()]
		if (cachedProfile) {
			console.log(
				'[Wizard][step0] Profile loaded from cache:',
				cachedProfile
			)

			ctx.scene.state = {
				...ctx.scene.state,
				...cachedProfile
			}
		} else {
			console.log('[Wizard][step0] No cached profile, loading from DB...')

			const account: Account =
				await this.userContextService.getAccount(ctx)
			if (!account?.profile) {
				console.warn(
					`[Wizard][step0] No profile found in DB for Telegram ID: ${ctx.from.id}`
				)
				await ctx.reply(
					'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
				)
				await ctx.scene.leave()
				return
			}

			const profile = account.profile
			console.log('[Wizard][step0] Profile loaded from DB:', profile)

			ctx.session[REDIS_KEY_PROFILE_SESSION_KEY()] = profile
			ctx.scene.state = {
				...ctx.scene.state,
				...profile
			}
		}

		console.log('[Wizard][step0] Final scene state:', ctx.scene.state)

		await ctx.reply(
			'‚úíÔ∏è –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?',
			Markup.keyboard([
				Buttons.primary(ctx.scene.state.name, '')
			]).resize()
		)
		ctx.wizard.next()
	}

	@WizardStep(1)
	async step1(@Ctx() ctx: CreateProfileContext): Promise<void> {
		const nameInput = ctx.message['text']

		const isNameValid = isValidName(nameInput)

		this.logStep(ctx, '1 - name', nameInput)

		if (!isNameValid) {
			await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–º—è.')
			return
		}

		ctx.scene.state.name = nameInput
		console.log('‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', nameInput)

		await ctx.reply(
			'üìÖ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?',
			Markup.keyboard([
				Buttons.primary(ctx.scene.state.age.toString(), '')
			]).resize()
		)
		ctx.wizard.next()
	}

	@WizardStep(2)
	async step2(@Ctx() ctx: CreateProfileContext): Promise<void> {
		const ageInput = ctx.message['text']

		const age = parseInt(ageInput)

		this.logStep(ctx, '2 - age input', age)

		if (isValidAge(age)) {
			await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.')
			return
		}

		ctx.scene.state.age = age
		console.log('‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', age)

		await ctx.reply(
			'üöª –ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–æ–ª?',
			Markup.keyboard([
				[
					Buttons.primary(GenderType.MALE, 'male'),
					Buttons.primary(GenderType.FEMALE, 'female')
				]
			]).resize()
		)

		ctx.wizard.next()
	}

	@WizardStep(3)
	async step3(@Ctx() ctx: CreateProfileContext): Promise<void> {
		const genderInput = ctx.message['text'].trim().toLowerCase()
		const normalizedGender = normalizeInput(genderInput)

		const isGenderValid = isValidGender(normalizedGender)
		if (!isGenderValid) {
			await ctx.reply(
				'‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª (–ø–∞—Ä–µ–Ω—å –∏–ª–∏ –¥–µ–≤—É—à–∫–∞).',
				Markup.keyboard([
					[
						Buttons.primary(GenderType.MALE, 'male'),
						Buttons.primary(GenderType.FEMALE, 'female')
					]
				]).resize()
			)
			return
		}

		ctx.scene.state.gender = genderInput
		await ctx.reply(
			'üîç –ö–æ–≥–æ —Ç—ã –∏—â–µ—à—å? (–ø–∞—Ä–µ–Ω—å / –¥–µ–≤—É—à–∫–∞ / –Ω–µ –≤–∞–∂–Ω–æ)',
			Markup.keyboard([
				[
					Buttons.primary(GenderType.MALE, '–ø–∞—Ä–µ–Ω—å'),
					Buttons.primary(GenderType.FEMALE, '–¥–µ–≤—É—à–∫–∞'),
					Buttons.primary(GenderType.ANY, '–ª—é–±–æ–π')
				]
			]).resize()
		)

		ctx.wizard.next()
	}

	@WizardStep(4)
	async step4(@Ctx() ctx: CreateProfileContext): Promise<void> {
		const genderInput = ctx.message['text']?.toLowerCase()
		const normalizedGender = normalizeInput(genderInput)

		const isValidPreferGender = isValidGender(normalizedGender)

		if (!isValidPreferGender) {
			await ctx.reply(
				'‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ (–ø–∞—Ä–µ–Ω—å, –¥–µ–≤—É—à–∫–∞, –Ω–µ –≤–∞–∂–Ω–æ).',
				Markup.keyboard([
					[
						Buttons.primary(GenderType.MALE, '–ø–∞—Ä–µ–Ω—å'),
						Buttons.primary(GenderType.FEMALE, '–¥–µ–≤—É—à–∫–∞'),
						Buttons.primary(GenderType.ANY, '–ª—é–±–æ–π')
					]
				]).resize()
			)
			return
		}

		ctx.scene.state.preferGender = genderInput
		await ctx.reply(
			'üìç –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∏—â–µ—Ç–µ —Å–æ—Å–µ–¥–∞?',
			Markup.keyboard([
				Buttons.primary(ctx.scene.state.relocateCity, '')
			]).resize()
		)

		ctx.wizard.next()
	}

	@WizardStep(5)
	async step5(@Ctx() ctx: CreateProfileContext): Promise<void> {
		const cityInput = ctx.message['text']

		const normalizedCityInput: string = normalizeInput(cityInput)

		if (!isValidString(normalizedCityInput)) {
			await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥.')
			return
		}

		ctx.scene.state.relocateCity = normalizedCityInput

		await ctx.reply(
			'üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 3-—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ –æ–¥–Ω–æ–π. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ì–æ—Ç–æ–≤–æ".',
			Markup.keyboard([['‚úÖ –ì–æ—Ç–æ–≤–æ']]).resize()
		)
		ctx.wizard.next()
	}

	@WizardStep(6)
	async step7(@Ctx() ctx: CreateProfileContext): Promise<void> {
		const msg = ctx.message
		const state = ctx.scene.state

		state.photos ||= []

		if ('text' in msg && msg.text === '‚úÖ –ì–æ—Ç–æ–≤–æ') {
			if (state.photos.length === 0) {
				await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.')
				return
			}
			await ctx.reply(
				'‚úèÔ∏è –û–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ —Å–æ—Å–µ–¥—É:',
				Markup.keyboard([
					Buttons.primary('–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ', '')
				]).resize()
			)
			ctx.wizard.next()
			return
		}

		const photo = msg['photo']
		if (!Array.isArray(photo)) {
			await ctx.reply(
				'‚ùå –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ (–Ω–µ –∫–∞–∫ —Ñ–∞–π–ª) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ì–æ—Ç–æ–≤–æ".'
			)
			return
		}

		const fileId = photo.at(-1).file_id
		state.photos.push(fileId)

		if (state.photos.length >= 3) {
			await ctx.reply(
				'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ 3 —Ñ–æ—Ç–æ. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª–µ–µ...',
				Markup.removeKeyboard()
			)
			await ctx.reply(
				'‚úèÔ∏è –û–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è:',
				Markup.keyboard([
					Buttons.primary('–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ', '')
				]).resize()
			)
			ctx.wizard.next()
			return
		}

		await ctx.reply(
			`‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å ${3 - state.photos.length}.`,
			Markup.keyboard([['‚úÖ –ì–æ—Ç–æ–≤–æ']]).resize()
		)
	}

	@WizardStep(7)
	async step8(@Ctx() ctx: CreateProfileContext): Promise<void> {
		const description = ctx.message['text']

		if (description.trim() === '–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ') {
			ctx.wizard.next()
			return
		}

		if (typeof description !== 'string') {
			await ctx.reply('‚ùå –û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.')
			return
		}

		ctx.scene.state.description = description

		await ctx.reply(
			'üéØ –ì–¥–µ –≤—ã —Å–µ–π—á–∞—Å –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ?',
			Markup.keyboard([
				Buttons.primary(ctx.scene.state.livingCity, '')
			]).resize()
		)
		ctx.wizard.next()
	}

	@WizardStep(8)
	async step9(@Ctx() ctx: CreateProfileContext): Promise<void> {
		const city = ctx.message['text']

		if (city !== '–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ') {
			this.logStep(ctx, '9 - living city', city)
			if (!isValidString(city)) {
				await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥.')
				return
			}

			ctx.scene.state.livingCity = city
		}

		const profile: Object & ProfileState = ctx.scene.state

		await ctx.reply('üéâ –£—Ä–∞! –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞.')

		const account: Account = await this.userContextService.getAccount(ctx)

		const renderData: RenderProfileOptions = {
			...(profile as Required<Omit<RenderProfileOptions, 'account'>>),
			account
		}

		await TelegramProfileRenderer.sendProfile(ctx, {
			...account.profile,
			account
		})

		const savedProfile: Profile = await this.profileService.editProfile(
			{
				livingCity: profile.livingCity,
				description: profile.description,
				age: profile.age,
				gender: profile.gender,
				relocateCity: profile.relocateCity,
				name: profile.name,
				photos: profile.photos,
				isActive: account.profile.isActive,
				preferGender: profile.preferGender,
				account: account
			},
			account.profile.id
		)

		delete ctx.session[REDIS_KEY_PROFILE_SESSION_KEY()]
		ctx.session[REDIS_KEY_PROFILE_SESSION_KEY()] = savedProfile

		await this.menuManagerService.send(ctx, 'MAIN_MENU')

		await ctx.scene.leave()
	}
}
